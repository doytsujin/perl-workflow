INTRO
========================================

The 'Workflow' Perl module implements a standalone workflow system. It
aims to be simple but flexible and therefore powerful. Each piece of
the workflow system has a direct and easily stated job, and hopefully
you'll find that you can put the pieces together to create very useful
systems.

Read 'perldoc Workflow' for a more detailed introduction, sample usage,
interactions with your applications, and more.


INSTALLATION
========================================

To install this module type the following:

   perl Build.PL
   ./Build
   ./Build test
   ./Build install

QUICK START
========================================

The eg/ticket/ directory contains a configured workflow system. You
can access it in two ways:

  * a command-line application (ticket.pl)
  * a web application          (ticket_web.pl)

It does have requirements above those of the basic workflow system. These are:

 Module            Howto install with CPAN shell
 ===============================================
 DBD::SQLite       'install DBI DBD::SQLite'
 LWP               'install Bundle::LWP'
 Template Toolkit  'install Template'

(For Win32 systems you can get the Template Toolkit PPD from
http://openinteract.sourceforge.net/; the DBD::SQLite PPD is available
from ActiveState)

The sample application is configured to use a SQLite database, and
while with a little configuration you can use a different DBMS, you
can get the demo running in less than a minute with SQLite. Draw your
own conclusions.

To initialize the database, just run the command-line application with
the '--db' switch:

 perl ticket.pl --db

This will create a new database for you. If a database (named
'ticket.db') already exists it will be wiped out. Running the
command-line application without the switch will bring you to a
'TicketServer: ' prompt. Issuing a 'cmd' command will give you a list
of valid commands along with a description of each. Hopefully you can
weave your way through doing something useful.

Next (and probably more fun), you can manipulate the workflow system
through the web application:

 perl ticket_web.pl

This will fire up a standalone web server using HTTP::Daemon. Once
it's started it will report to you the hostname and port it's running
on:

  $ perl ticket_web.pl
  Please contact me at [URL: http://shazam.local:57988/]

Paste that URL into your browser and fire away. It's a very simple
application but looking through the 'ticket_web.pl' should give you an
idea of how to integrate the workflow system into your display
technology.


DEPENDENCIES
========================================

This module requires these other modules and libraries:

    Class::Accessor
    DateTime
    DateTime::Format::Strptime
    Exception::Class
    Log::Dispatch
    Log::Log4perl
	Test::More
    XML::Simple

COPYRIGHT AND LICENCE
========================================

Copyright (c) 2003 - 2004 Chris Winters and Arvato Direct. All rights
reserved.  This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
